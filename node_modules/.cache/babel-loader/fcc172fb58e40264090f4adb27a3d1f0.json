{"ast":null,"code":"import \"source-map-support/register\";\nimport handler from \"./libs/handler-lib\";\nimport dynamoDb from \"./libs/dynamodb-lib\";\nexport const main = handler(async (event, context) => {\n  const data = JSON.parse(event.body);\n  const params = {\n    TableName: process.env.tableName,\n    // 'Key' defines the partition key and sort key of the item to be updated\n    Key: {\n      userId: \"123\",\n      // The id of the author\n      noteId: event.pathParameters.id // The id of the note from the path\n\n    },\n    // 'UpdateExpression' defines the attributes to be updated\n    // 'ExpressionAttributeValues' defines the value in the update expression\n    UpdateExpression: \"SET content = :content, attachment = :attachment\",\n    ExpressionAttributeValues: {\n      \":attachment\": data.attachment || null,\n      \":content\": data.content || null\n    },\n    // 'ReturnValues' specifies if and how to return the item's attributes,\n    // where ALL_NEW returns all attributes of the item after the update; you\n    // can inspect 'result' below to see how it works with different settings\n    ReturnValues: \"ALL_NEW\"\n  };\n  await dynamoDb.update(params);\n  return {\n    status: true\n  };\n});","map":{"version":3,"sources":["/Users/vishal.garg/master/notes-api/update.js"],"names":["handler","dynamoDb","main","event","context","data","JSON","parse","body","params","TableName","process","env","tableName","Key","userId","noteId","pathParameters","id","UpdateExpression","ExpressionAttributeValues","attachment","content","ReturnValues","update","status"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,OAAO,MAAMC,IAAI,GAAGF,OAAO,CAAC,OAAOG,KAAP,EAAcC,OAAd,KAA0B;AACpD,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,IAAjB,CAAb;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADV;AAEb;AACAC,IAAAA,GAAG,EAAE;AACHC,MAAAA,MAAM,EAAE,KADL;AACY;AACfC,MAAAA,MAAM,EAAEb,KAAK,CAACc,cAAN,CAAqBC,EAF1B,CAE8B;;AAF9B,KAHQ;AAOb;AACA;AACAC,IAAAA,gBAAgB,EAAE,kDATL;AAUbC,IAAAA,yBAAyB,EAAE;AACzB,qBAAef,IAAI,CAACgB,UAAL,IAAmB,IADT;AAEzB,kBAAYhB,IAAI,CAACiB,OAAL,IAAgB;AAFH,KAVd;AAcb;AACA;AACA;AACAC,IAAAA,YAAY,EAAE;AAjBD,GAAf;AAoBA,QAAMtB,QAAQ,CAACuB,MAAT,CAAgBf,MAAhB,CAAN;AAEA,SAAO;AAAEgB,IAAAA,MAAM,EAAE;AAAV,GAAP;AACD,CAzB0B,CAApB","sourcesContent":["import handler from \"./libs/handler-lib\";\nimport dynamoDb from \"./libs/dynamodb-lib\";\n\nexport const main = handler(async (event, context) => {\n  const data = JSON.parse(event.body);\n  const params = {\n    TableName: process.env.tableName,\n    // 'Key' defines the partition key and sort key of the item to be updated\n    Key: {\n      userId: \"123\", // The id of the author\n      noteId: event.pathParameters.id, // The id of the note from the path\n    },\n    // 'UpdateExpression' defines the attributes to be updated\n    // 'ExpressionAttributeValues' defines the value in the update expression\n    UpdateExpression: \"SET content = :content, attachment = :attachment\",\n    ExpressionAttributeValues: {\n      \":attachment\": data.attachment || null,\n      \":content\": data.content || null,\n    },\n    // 'ReturnValues' specifies if and how to return the item's attributes,\n    // where ALL_NEW returns all attributes of the item after the update; you\n    // can inspect 'result' below to see how it works with different settings\n    ReturnValues: \"ALL_NEW\",\n  };\n\n  await dynamoDb.update(params);\n\n  return { status: true };\n});\n"]},"metadata":{},"sourceType":"module"}